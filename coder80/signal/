SIGACTION(2)                                  Linux Programmer's Manual                                  SIGACTION(2)



NNAAMMEE
       sigaction - examine and change a signal action

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssiiggnnaall..hh>>

       iinntt ssiiggaaccttiioonn((iinntt _s_i_g_n_u_m,, ccoonnsstt ssttrruucctt ssiiggaaccttiioonn **_a_c_t,,
                     ssttrruucctt ssiiggaaccttiioonn **_o_l_d_a_c_t));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ssiiggaaccttiioonn(): _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE

       _s_i_g_i_n_f_o___t: _POSIX_C_SOURCE >= 199309L

DDEESSCCRRIIPPTTIIOONN
       The  ssiiggaaccttiioonn()  system call is used to change the action taken by a process on receipt of a specific signal.
       (See ssiiggnnaall(7) for an overview of signals.)

       _s_i_g_n_u_m specifies the signal and can be any valid signal except SSIIGGKKIILLLL and SSIIGGSSTTOOPP.

       If _a_c_t is non-NULL, the new action for signal _s_i_g_n_u_m is installed from _a_c_t.  If _o_l_d_a_c_t is non-NULL, the previ‐
       ous action is saved in _o_l_d_a_c_t.

       The _s_i_g_a_c_t_i_o_n structure is defined as something like:

           struct sigaction {
               void     (*sa_handler)(int);
               void     (*sa_sigaction)(int, siginfo_t *, void *);
               sigset_t   sa_mask;
               int        sa_flags;
               void     (*sa_restorer)(void);
           };

       On some architectures a union is involved: do not assign to both _s_a___h_a_n_d_l_e_r and _s_a___s_i_g_a_c_t_i_o_n.

       The _s_a___r_e_s_t_o_r_e_r element is obsolete and should not be used.  POSIX does not specify a _s_a___r_e_s_t_o_r_e_r element.

       _s_a___h_a_n_d_l_e_r  specifies  the  action  to  be  associated  with _s_i_g_n_u_m and may be SSIIGG__DDFFLL for the default action,
       SSIIGG__IIGGNN to ignore this signal, or a pointer to a signal handling function.  This function receives the  signal
       number as its only argument.

       If  SSAA__SSIIGGIINNFFOO  is  specified in _s_a___f_l_a_g_s, then _s_a___s_i_g_a_c_t_i_o_n (instead of _s_a___h_a_n_d_l_e_r) specifies the signal-han‐
       dling function for _s_i_g_n_u_m.  This function receives the signal number as its first argument,  a  pointer  to  a
       _s_i_g_i_n_f_o___t  as its second argument and a pointer to a _u_c_o_n_t_e_x_t___t (cast to _v_o_i_d _*) as its third argument.  (Com‐
       monly, the handler function doesn't make any use of the third argument.  See ggeettccoonntteexxtt(3) for further  infor‐
       mation about _u_c_o_n_t_e_x_t___t.)

       _s_a___m_a_s_k  specifies  a mask of signals which should be blocked (i.e., added to the signal mask of the thread in
       which the signal handler is invoked) during execution of the signal handler.  In addition,  the  signal  which
       triggered the handler will be blocked, unless the SSAA__NNOODDEEFFEERR flag is used.

       _s_a___f_l_a_g_s  specifies a set of flags which modify the behavior of the signal.  It is formed by the bitwise OR of
       zero or more of the following:

           SSAA__NNOOCCLLDDSSTTOOPP
                  If _s_i_g_n_u_m is SSIIGGCCHHLLDD, do not receive notification  when  child  processes  stop  (i.e.,  when  they
                  receive  one  of SSIIGGSSTTOOPP, SSIIGGTTSSTTPP, SSIIGGTTTTIINN, or SSIIGGTTTTOOUU) or resume (i.e., they receive SSIIGGCCOONNTT) (see
                  wwaaiitt(2)).  This flag is meaningful only when establishing a handler for SSIIGGCCHHLLDD.

           SSAA__NNOOCCLLDDWWAAIITT (since Linux 2.6)
                  If _s_i_g_n_u_m is SSIIGGCCHHLLDD, do not transform children into zombies when they terminate.  See  also  wwaaiitt‐‐
                  ppiidd(2).  This flag is meaningful only when establishing a handler for SSIIGGCCHHLLDD, or when setting that
                  signal's disposition to SSIIGG__DDFFLL.

                  If the SSAA__NNOOCCLLDDWWAAIITT flag is set when establishing a handler for SSIIGGCCHHLLDD, POSIX.1 leaves it unspeci‐
                  fied  whether  a  SSIIGGCCHHLLDD signal is generated when a child process terminates.  On Linux, a SSIIGGCCHHLLDD
                  signal is generated in this case; on some other implementations, it is not.

           SSAA__NNOODDEEFFEERR
                  Do not prevent the signal from being received from within its own signal  handler.   This  flag  is
                  meaningful  only when establishing a signal handler.  SSAA__NNOOMMAASSKK is an obsolete, nonstandard synonym
                  for this flag.

           SSAA__OONNSSTTAACCKK
                  Call the signal handler on an alternate signal stack provided by ssiiggaallttssttaacckk(2).  If  an  alternate
                  stack  is  not available, the default stack will be used.  This flag is meaningful only when estab‐
                  lishing a signal handler.

           SSAA__RREESSEETTHHAANNDD
                  Restore the signal action to the default upon entry to the signal handler.  This flag is meaningful
                  only  when  establishing a signal handler.  SSAA__OONNEESSHHOOTT is an obsolete, nonstandard synonym for this
                  flag.

           SSAA__RREESSTTAARRTT
                  Provide behavior compatible with BSD signal semantics by making certain  system  calls  restartable
                  across  signals.   This  flag is meaningful only when establishing a signal handler.  See ssiiggnnaall(7)
                  for a discussion of system call restarting.

           SSAA__SSIIGGIINNFFOO (since Linux 2.2)
                  The signal handler takes three arguments, not one.   In  this  case,  _s_a___s_i_g_a_c_t_i_o_n  should  be  set
                  instead of _s_a___h_a_n_d_l_e_r.  This flag is meaningful only when establishing a signal handler.

       The _s_i_g_i_n_f_o___t argument to _s_a___s_i_g_a_c_t_i_o_n is a struct with the following elements:

           siginfo_t {
               int      si_signo;    /* Signal number */
               int      si_errno;    /* An errno value */
               int      si_code;     /* Signal code */
               int      si_trapno;   /* Trap number that caused
                                        hardware-generated signal
                                        (unused on most architectures) */
               pid_t    si_pid;      /* Sending process ID */
               uid_t    si_uid;      /* Real user ID of sending process */
               int      si_status;   /* Exit value or signal */
               clock_t  si_utime;    /* User time consumed */
               clock_t  si_stime;    /* System time consumed */
               sigval_t si_value;    /* Signal value */
               int      si_int;      /* POSIX.1b signal */
               void    *si_ptr;      /* POSIX.1b signal */
               int      si_overrun;  /* Timer overrun count; POSIX.1b timers */
               int      si_timerid;  /* Timer ID; POSIX.1b timers */
               void    *si_addr;     /* Memory location which caused fault */
               long     si_band;     /* Band event (was _i_n_t in
                                        glibc 2.3.2 and earlier) */
               int      si_fd;       /* File descriptor */
               short    si_addr_lsb; /* Least significant bit of address
                                        (since Linux 2.6.32) */
           }

       _s_i___s_i_g_n_o,  _s_i___e_r_r_n_o  and  _s_i___c_o_d_e  are defined for all signals.  (_s_i___e_r_r_n_o is generally unused on Linux.)  The
       rest of the struct may be a union, so that one should read only the fields that are meaningful for  the  given
       signal:

       * Signals  sent  with  kkiillll(2)  and  ssiiggqquueeuuee(3)  fill  in  _s_i___p_i_d and _s_i___u_i_d.  In addition, signals sent with
         ssiiggqquueeuuee(3) fill in _s_i___i_n_t and _s_i___p_t_r with the values specified by the sender of the signal; see ssiiggqquueeuuee(3)
         for more details.

       * Signals  sent  by POSIX.1b timers (since Linux 2.6) fill in _s_i___o_v_e_r_r_u_n and _s_i___t_i_m_e_r_i_d.  The _s_i___t_i_m_e_r_i_d field
         is an internal ID used by the kernel to identify the timer; it is not the same as the timer ID  returned  by
         ttiimmeerr__ccrreeaattee(2).   The  _s_i___o_v_e_r_r_u_n  field  is  the  timer  overrun count; this is the same information as is
         obtained by a call to ttiimmeerr__ggeettoovveerrrruunn(2).  These fields are nonstandard Linux extensions.

       * Signals sent for message queue notification (see the description of SSIIGGEEVV__SSIIGGNNAALL in  mmqq__nnoottiiffyy(3))  fill  in
         _s_i___i_n_t/_s_i___p_t_r,  with  the  _s_i_g_e_v___v_a_l_u_e  supplied to mmqq__nnoottiiffyy(3); _s_i___p_i_d, with the process ID of the message
         sender; and _s_i___u_i_d, with the real user ID of the message sender.

       * SSIIGGCCHHLLDD fills in _s_i___p_i_d, _s_i___u_i_d, _s_i___s_t_a_t_u_s, _s_i___u_t_i_m_e, and _s_i___s_t_i_m_e, providing information about  the  child.
         The  _s_i___p_i_d  field  is the process ID of the child; _s_i___u_i_d is the child's real user ID.  The _s_i___s_t_a_t_u_s field
         contains the exit status of the child (if _s_i___c_o_d_e is CCLLDD__EEXXIITTEEDD), or  the  signal  number  that  caused  the
         process  to  change state.  The _s_i___u_t_i_m_e and _s_i___s_t_i_m_e contain the user and system CPU time used by the child
         process; these fields do not include  the  times  used  by  waited-for  children  (unlike  ggeettrruussaaggee(2)  and
         ttiimmeess(2)).   In  kernels  up  to  2.6,  and  since  2.6.27,  these  fields  report  CPU  time  in  units  of
         _s_y_s_c_o_n_f_(___S_C___C_L_K___T_C_K_).  In 2.6 kernels before 2.6.27, a bug meant that these fields reported time in units of
         the (configurable) system jiffy (see ttiimmee(7)).

       * SSIIGGIILLLL,  SSIIGGFFPPEE, SSIIGGSSEEGGVV, SSIIGGBBUUSS, and SSIIGGTTRRAAPP fill in _s_i___a_d_d_r with the address of the fault.  On some archi‐
         tectures, these signals also fill  in  the  _s_i___t_r_a_p_n_o  field.   Some  suberrors  of  SSIIGGBBUUSS,  in  particular
         BBUUSS__MMCCEEEERRRR__AAOO  and  BBUUSS__MMCCEEEERRRR__AARR, also fill in _s_i___a_d_d_r___l_s_b.  This field indicates the least significant bit
         of the reported address and therefore the extent of the corruption.  For example, if a full  page  was  cor‐
         rupted,  _s_i___a_d_d_r___l_s_b  contains  _l_o_g_2_(_s_y_s_c_o_n_f_(___S_C___P_A_G_E_S_I_Z_E_)_).  BBUUSS__MMCCEERRRR__** and _s_i___a_d_d_r___l_s_b are Linux-specific
         extensions.

       * SSIIGGIIOO/SSIIGGPPOOLLLL (the two names are synonyms on Linux) fills in _s_i___b_a_n_d and _s_i___f_d.  The _s_i___b_a_n_d event is a  bit
         mask  containing  the  same values as are filled in the _r_e_v_e_n_t_s field by ppoollll(2).  The _s_i___f_d field indicates
         the file descriptor for which the I/O event occurred.

       _s_i___c_o_d_e is a value (not a bit mask) indicating why this signal was sent.  The following list shows the  values
       which can be placed in _s_i___c_o_d_e for any signal, along with reason that the signal was generated.

           SSII__UUSSEERR        kkiillll(2)

           SSII__KKEERRNNEELL      Sent by the kernel.

           SSII__QQUUEEUUEE       ssiiggqquueeuuee(3)

           SSII__TTIIMMEERR       POSIX timer expired

           SSII__MMEESSGGQQ       POSIX message queue state changed (since Linux 2.6.6); see mmqq__nnoottiiffyy(3)

           SSII__AASSYYNNCCIIOO     AIO completed

           SSII__SSIIGGIIOO       Queued SSIIGGIIOO (only in kernels up to Linux 2.2; from Linux 2.4 onward SSIIGGIIOO/SSIIGGPPOOLLLL fills in
                          _s_i___c_o_d_e as described below).

           SSII__TTKKIILLLL       ttkkiillll(2) or ttggkkiillll(2) (since Linux 2.4.19)

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGIILLLL signal:

           IILLLL__IILLLLOOPPCC     illegal opcode

           IILLLL__IILLLLOOPPNN     illegal operand

           IILLLL__IILLLLAADDRR     illegal addressing mode

           IILLLL__IILLLLTTRRPP     illegal trap

           IILLLL__PPRRVVOOPPCC     privileged opcode

           IILLLL__PPRRVVRREEGG     privileged register

           IILLLL__CCOOPPRROOCC     coprocessor error

           IILLLL__BBAADDSSTTKK     internal stack error

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGFFPPEE signal:

           FFPPEE__IINNTTDDIIVV     integer divide by zero

           FFPPEE__IINNTTOOVVFF     integer overflow

           FFPPEE__FFLLTTDDIIVV     floating-point divide by zero

           FFPPEE__FFLLTTOOVVFF     floating-point overflow

           FFPPEE__FFLLTTUUNNDD     floating-point underflow

           FFPPEE__FFLLTTRREESS     floating-point inexact result

           FFPPEE__FFLLTTIINNVV     floating-point invalid operation

           FFPPEE__FFLLTTSSUUBB     subscript out of range

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGSSEEGGVV signal:

           SSEEGGVV__MMAAPPEERRRR    address not mapped to object

           SSEEGGVV__AACCCCEERRRR    invalid permissions for mapped object

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGBBUUSS signal:

           BBUUSS__AADDRRAALLNN     invalid address alignment

           BBUUSS__AADDRREERRRR     nonexistent physical address

           BBUUSS__OOBBJJEERRRR     object-specific hardware error

           BBUUSS__MMCCEEEERRRR__AARR (since Linux 2.6.32)
                          Hardware memory error consumed on a machine check; action required.

           BBUUSS__MMCCEEEERRRR__AAOO (since Linux 2.6.32)
                          Hardware memory error detected in process but not consumed; action optional.

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGTTRRAAPP signal:

           TTRRAAPP__BBRRKKPPTT     process breakpoint

           TTRRAAPP__TTRRAACCEE     process trace trap

           TTRRAAPP__BBRRAANNCCHH (since Linux 2.4)
                          process taken branch trap

           TTRRAAPP__HHWWBBKKPPTT (since Linux 2.4)
                          hardware breakpoint/watchpoint

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGCCHHLLDD signal:

           CCLLDD__EEXXIITTEEDD     child has exited

           CCLLDD__KKIILLLLEEDD     child was killed

           CCLLDD__DDUUMMPPEEDD     child terminated abnormally

           CCLLDD__TTRRAAPPPPEEDD    traced child has trapped

           CCLLDD__SSTTOOPPPPEEDD    child has stopped

           CCLLDD__CCOONNTTIINNUUEEDD  stopped child has continued (since Linux 2.6.9)

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGIIOO/SSIIGGPPOOLLLL signal:

           PPOOLLLL__IINN        data input available

           PPOOLLLL__OOUUTT       output buffers available

           PPOOLLLL__MMSSGG       input message available

           PPOOLLLL__EERRRR       I/O error

           PPOOLLLL__PPRRII       high priority input available

           PPOOLLLL__HHUUPP       device disconnected

RREETTUURRNN VVAALLUUEE
       ssiiggaaccttiioonn() returns 0 on success; on error, -1 is returned, and _e_r_r_n_o is set to indicate the error.

EERRRROORRSS
       EEFFAAUULLTT _a_c_t or _o_l_d_a_c_t points to memory which is not a valid part of the process address space.

       EEIINNVVAALL An invalid signal was specified.  This will also be generated if an  attempt  is  made  to  change  the
              action for SSIIGGKKIILLLL or SSIIGGSSTTOOPP, which cannot be caught or ignored.

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, SVr4.

NNOOTTEESS
       A  child  created  via  ffoorrkk(2) inherits a copy of its parent's signal dispositions.  During an eexxeeccvvee(2), the
       dispositions of handled signals are reset to the  default;  the  dispositions  of  ignored  signals  are  left
       unchanged.

       According  to POSIX, the behavior of a process is undefined after it ignores a SSIIGGFFPPEE, SSIIGGIILLLL, or SSIIGGSSEEGGVV sig‐
       nal that was not generated by kkiillll(2) or rraaiissee(3).  Integer division by zero has undefined  result.   On  some
       architectures  it  will generate a SSIIGGFFPPEE signal.  (Also dividing the most negative integer by -1 may generate
       SSIIGGFFPPEE.)  Ignoring this signal might lead to an endless loop.

       POSIX.1-1990 disallowed setting the action for SSIIGGCCHHLLDD to SSIIGG__IIGGNN.  POSIX.1-2001 allows this  possibility,  so
       that ignoring SSIIGGCCHHLLDD can be used to prevent the creation of zombies (see wwaaiitt(2)).  Nevertheless, the histor‐
       ical BSD and System V behaviors for ignoring SSIIGGCCHHLLDD differ, so that the only completely  portable  method  of
       ensuring  that  terminated children do not become zombies is to catch the SSIIGGCCHHLLDD signal and perform a wwaaiitt(2)
       or similar.

       POSIX.1-1990 specified only SSAA__NNOOCCLLDDSSTTOOPP.  POSIX.1-2001  added  SSAA__NNOOCCLLDDWWAAIITT,  SSAA__RREESSEETTHHAANNDD,  SSAA__NNOODDEEFFEERR,  and
       SSAA__SSIIGGIINNFFOO.   Use  of  these latter values in _s_a___f_l_a_g_s may be less portable in applications intended for older
       UNIX implementations.

       The SSAA__RREESSEETTHHAANNDD flag is compatible with the SVr4 flag of the same name.

       The SSAA__NNOODDEEFFEERR flag is compatible with the SVr4 flag of the same name under kernels 1.3.9 and newer.  On older
       kernels the Linux implementation allowed the receipt of any signal, not just the one we are installing (effec‐
       tively overriding any _s_a___m_a_s_k settings).

       ssiiggaaccttiioonn() can be called with a NULL second argument to query the current signal handler.   It  can  also  be
       used to check whether a given signal is valid for the current machine by calling it with NULL second and third
       arguments.

       It is not possible to block SSIIGGKKIILLLL or SSIIGGSSTTOOPP (by specifying  them  in  _s_a___m_a_s_k).   Attempts  to  do  so  are
       silently ignored.

       See ssiiggsseettooppss(3) for details on manipulating signal sets.

       See  ssiiggnnaall(7)  for  a  list of the async-signal-safe functions that can be safely called inside from inside a
       signal handler.

   UUnnddooccuummeenntteedd
       Before the introduction of SSAA__SSIIGGIINNFFOO it was also possible to get some additional information, namely by using
       a  _s_a___h_a_n_d_l_e_r  with  second  argument  of  type  _s_t_r_u_c_t _s_i_g_c_o_n_t_e_x_t.  See the relevant Linux kernel sources for
       details.  This use is obsolete now.

BBUUGGSS
       In kernels up to and including 2.6.13, specifying SSAA__NNOODDEEFFEERR in _s_a___f_l_a_g_s prevents not only the delivered  sig‐
       nal  from  being  masked during execution of the handler, but also the signals specified in _s_a___m_a_s_k.  This bug
       was fixed in kernel 2.6.14.

EEXXAAMMPPLLEE
       See mmpprrootteecctt(2).

SSEEEE AALLSSOO
       kkiillll(1), kkiillll(2), kkiillllppgg(2), ppaauussee(2), rreessttaarrtt__ssyyssccaallll(2), ssiiggaallttssttaacckk(2),  ssiiggnnaall(2),  ssiiggnnaallffdd(2),  ssiiggppeenndd‐‐
       iinngg(2),   ssiiggpprrooccmmaasskk(2),   ssiiggssuussppeenndd(2),  wwaaiitt(2),  rraaiissee(3),  ssiiggiinntteerrrruupptt(3),  ssiiggqquueeuuee(3),  ssiiggsseettooppss(3),
       ssiiggvveecc(3), ccoorree(5), ssiiggnnaall(7)

CCOOLLOOPPHHOONN
       This page is part of release 3.74 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the  project,  information
       about    reporting    bugs,    and    the    latest    version    of    this    page,    can   be   found   at
       http://www.kernel.org/doc/man-pages/.



Linux                                                 2014-04-27                                         SIGACTION(2)
