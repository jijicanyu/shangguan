并发
并发主要讲信号 和 多线程

一.信号
1.信号的概念
	信号是软件层面的中断,信号不是中断
	信号的响应基于中断

2.signal();

3.信号的不可靠

4.可重入函数
	所有的系统调用都是可重入函数,一部分库函数也是可重入的.例如:memcpy

5.信号的响应过程
	信号从收到到响应有一个不可避免的延迟
	思考:1.如何忽略掉一个信号
			我们不能阻止信号的到来,但可以把信号mask设置成0,不对特定信号进行响应
			例如signal(SIGINT, SIG_IGN);//实际就是把SIGINT的mask位设置成0,来达到忽略这个信号的目的
		 2.标准信号为什么会丢失
		 3.标准信号的响应没有严格的顺序,但有基本顺序.
			例:来了一个引起段错误的信号和一个引起进程停止的程序,段错误那个就会优先响应
			例:收到SIGINT SITTERM SIGQUIT 这种平级的信号,就没有特定的响应顺序
		 4.不能从信号处理函数中随意(setjmp,longjmp)

6.常用函数
	kill();
	raise();
	alarm();
	例:使用单一计时器setitimer或alarm,构造一组函数,实现任意数量的计时器

	pause();
	system();

	sleep();
	nanosleep();
	usleep();
	select(-1,NULL, NULL, NULL, 定时时间);


7.信号集
	信号集类型(位图):sigset_t
	sigempty()
	sigfillset()
	sigaddset()
	sigdelset()
	sigismember()

8.信号屏蔽字的处理/pending集的处理
	sigprocmask()
	sigpending()

9.扩展
	sigsuspend();
	sigaction();替换signal();
	setitimer();替换alarm
10.标准信号和实时信号

===================================================================================================
===================================================================================================
===================================================================================================
===================================================================================================

二.多线程
1.线程的概念

2.线程的创建
  pthread_create();
  线程的调度取决于cpu的调度策略和cpu核数

  线程的终止3种方式:
	1)线程从启动例程返回,返回值就是线程的退出码
	2)线程被同一进程的其他线程取消
	3)线程调用pthread_exit(); main线程在调用pthread_join-->wait()

  栈的清理
	pthread_cleanup_push
	pthread_cleanup_pop

  线程的取消选项

3.线程同步
	3种方式

4.线程属性
  线程同步的属性

5.重入

6.线程与信号
  线程与fork
